// Mocks generated by Mockito 5.4.4 from annotations
// in groceries_app/test/test_helpers/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i9;
import 'dart:convert' as _i15;
import 'dart:typed_data' as _i16;

import 'package:dartz/dartz.dart' as _i2;
import 'package:groceries_app/core/error/failure.dart' as _i10;
import 'package:groceries_app/features/data/data_sources/remote_data_sources.dart'
    as _i14;
import 'package:groceries_app/features/data/models/option_model.dart' as _i7;
import 'package:groceries_app/features/data/models/product_model.dart' as _i4;
import 'package:groceries_app/features/domain/entities/options_entity.dart'
    as _i6;
import 'package:groceries_app/features/domain/entities/product_entity.dart'
    as _i5;
import 'package:groceries_app/features/domain/repositories/products_repository.dart'
    as _i3;
import 'package:groceries_app/features/domain/use_cases/get_all_peoduct_use_case.dart'
    as _i11;
import 'package:groceries_app/features/domain/use_cases/get_single_product_use_case.dart'
    as _i12;
import 'package:http/http.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i13;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeProductRepository_1 extends _i1.SmartFake
    implements _i3.ProductRepository {
  _FakeProductRepository_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeProductModel_2 extends _i1.SmartFake implements _i4.ProductModel {
  _FakeProductModel_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeProductEntity_3 extends _i1.SmartFake implements _i5.ProductEntity {
  _FakeProductEntity_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeOptionEntity_4 extends _i1.SmartFake implements _i6.OptionEntity {
  _FakeOptionEntity_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeOptionModel_5 extends _i1.SmartFake implements _i7.OptionModel {
  _FakeOptionModel_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_6 extends _i1.SmartFake implements _i8.Response {
  _FakeResponse_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamedResponse_7 extends _i1.SmartFake
    implements _i8.StreamedResponse {
  _FakeStreamedResponse_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ProductRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductRepository extends _i1.Mock implements _i3.ProductRepository {
  MockProductRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i2.Either<_i10.Failure, _i5.ProductEntity>> getProduct(
          String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getProduct,
          [id],
        ),
        returnValue:
            _i9.Future<_i2.Either<_i10.Failure, _i5.ProductEntity>>.value(
                _FakeEither_0<_i10.Failure, _i5.ProductEntity>(
          this,
          Invocation.method(
            #getProduct,
            [id],
          ),
        )),
      ) as _i9.Future<_i2.Either<_i10.Failure, _i5.ProductEntity>>);

  @override
  _i9.Future<_i2.Either<_i10.Failure, List<_i5.ProductEntity>>>
      getAllProducts() => (super.noSuchMethod(
            Invocation.method(
              #getAllProducts,
              [],
            ),
            returnValue: _i9.Future<
                    _i2.Either<_i10.Failure, List<_i5.ProductEntity>>>.value(
                _FakeEither_0<_i10.Failure, List<_i5.ProductEntity>>(
              this,
              Invocation.method(
                #getAllProducts,
                [],
              ),
            )),
          ) as _i9.Future<_i2.Either<_i10.Failure, List<_i5.ProductEntity>>>);
}

/// A class which mocks [GetAllPeoductUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAllPeoductUseCase extends _i1.Mock
    implements _i11.GetAllPeoductUseCase {
  MockGetAllPeoductUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.ProductRepository get productRepository => (super.noSuchMethod(
        Invocation.getter(#productRepository),
        returnValue: _FakeProductRepository_1(
          this,
          Invocation.getter(#productRepository),
        ),
      ) as _i3.ProductRepository);

  @override
  _i9.Future<_i2.Either<_i10.Failure, List<_i5.ProductEntity>>> execute() =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
        ),
        returnValue:
            _i9.Future<_i2.Either<_i10.Failure, List<_i5.ProductEntity>>>.value(
                _FakeEither_0<_i10.Failure, List<_i5.ProductEntity>>(
          this,
          Invocation.method(
            #execute,
            [],
          ),
        )),
      ) as _i9.Future<_i2.Either<_i10.Failure, List<_i5.ProductEntity>>>);
}

/// A class which mocks [GetSingleProductUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetSingleProductUseCase extends _i1.Mock
    implements _i12.GetSingleProductUseCase {
  MockGetSingleProductUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.ProductRepository get productRepository => (super.noSuchMethod(
        Invocation.getter(#productRepository),
        returnValue: _FakeProductRepository_1(
          this,
          Invocation.getter(#productRepository),
        ),
      ) as _i3.ProductRepository);

  @override
  _i9.Future<_i2.Either<_i10.Failure, _i5.ProductEntity>> execute(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [id],
        ),
        returnValue:
            _i9.Future<_i2.Either<_i10.Failure, _i5.ProductEntity>>.value(
                _FakeEither_0<_i10.Failure, _i5.ProductEntity>(
          this,
          Invocation.method(
            #execute,
            [id],
          ),
        )),
      ) as _i9.Future<_i2.Either<_i10.Failure, _i5.ProductEntity>>);
}

/// A class which mocks [ProductModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductModel extends _i1.Mock implements _i4.ProductModel {
  MockProductModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: _i13.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
      ) as String);

  @override
  String get title => (super.noSuchMethod(
        Invocation.getter(#title),
        returnValue: _i13.dummyValue<String>(
          this,
          Invocation.getter(#title),
        ),
      ) as String);

  @override
  String get description => (super.noSuchMethod(
        Invocation.getter(#description),
        returnValue: _i13.dummyValue<String>(
          this,
          Invocation.getter(#description),
        ),
      ) as String);

  @override
  String get imageUrl => (super.noSuchMethod(
        Invocation.getter(#imageUrl),
        returnValue: _i13.dummyValue<String>(
          this,
          Invocation.getter(#imageUrl),
        ),
      ) as String);

  @override
  double get rating => (super.noSuchMethod(
        Invocation.getter(#rating),
        returnValue: 0.0,
      ) as double);

  @override
  double get price => (super.noSuchMethod(
        Invocation.getter(#price),
        returnValue: 0.0,
      ) as double);

  @override
  double get discount => (super.noSuchMethod(
        Invocation.getter(#discount),
        returnValue: 0.0,
      ) as double);

  @override
  List<_i6.OptionEntity> get options => (super.noSuchMethod(
        Invocation.getter(#options),
        returnValue: <_i6.OptionEntity>[],
      ) as List<_i6.OptionEntity>);

  @override
  List<Object?> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object?>[],
      ) as List<Object?>);

  @override
  Map<String, dynamic> toJson() => (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  _i4.ProductModel fromEntity(_i5.ProductEntity? entity) => (super.noSuchMethod(
        Invocation.method(
          #fromEntity,
          [entity],
        ),
        returnValue: _FakeProductModel_2(
          this,
          Invocation.method(
            #fromEntity,
            [entity],
          ),
        ),
      ) as _i4.ProductModel);

  @override
  _i5.ProductEntity toEntity() => (super.noSuchMethod(
        Invocation.method(
          #toEntity,
          [],
        ),
        returnValue: _FakeProductEntity_3(
          this,
          Invocation.method(
            #toEntity,
            [],
          ),
        ),
      ) as _i5.ProductEntity);
}

/// A class which mocks [OptionModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockOptionModel extends _i1.Mock implements _i7.OptionModel {
  MockOptionModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: _i13.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
      ) as String);

  @override
  String get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: _i13.dummyValue<String>(
          this,
          Invocation.getter(#name),
        ),
      ) as String);

  @override
  double get price => (super.noSuchMethod(
        Invocation.getter(#price),
        returnValue: 0.0,
      ) as double);

  @override
  List<Object?> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object?>[],
      ) as List<Object?>);

  @override
  Map<String, dynamic> toJson() => (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  _i6.OptionEntity toEntity() => (super.noSuchMethod(
        Invocation.method(
          #toEntity,
          [],
        ),
        returnValue: _FakeOptionEntity_4(
          this,
          Invocation.method(
            #toEntity,
            [],
          ),
        ),
      ) as _i6.OptionEntity);

  @override
  _i7.OptionModel fromEntity(_i6.OptionEntity? entity) => (super.noSuchMethod(
        Invocation.method(
          #fromEntity,
          [entity],
        ),
        returnValue: _FakeOptionModel_5(
          this,
          Invocation.method(
            #fromEntity,
            [entity],
          ),
        ),
      ) as _i7.OptionModel);
}

/// A class which mocks [RemoteDataSources].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoteDataSources extends _i1.Mock implements _i14.RemoteDataSources {
  MockRemoteDataSources() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i4.ProductModel> getProductById(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getProductById,
          [id],
        ),
        returnValue: _i9.Future<_i4.ProductModel>.value(_FakeProductModel_2(
          this,
          Invocation.method(
            #getProductById,
            [id],
          ),
        )),
      ) as _i9.Future<_i4.ProductModel>);

  @override
  _i9.Future<List<_i4.ProductModel>> getAllProduct() => (super.noSuchMethod(
        Invocation.method(
          #getAllProduct,
          [],
        ),
        returnValue:
            _i9.Future<List<_i4.ProductModel>>.value(<_i4.ProductModel>[]),
      ) as _i9.Future<List<_i4.ProductModel>>);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClient extends _i1.Mock implements _i8.Client {
  MockHttpClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i8.Response> head(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [url],
          {#headers: headers},
        ),
        returnValue: _i9.Future<_i8.Response>.value(_FakeResponse_6(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i9.Future<_i8.Response>);

  @override
  _i9.Future<_i8.Response> get(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {#headers: headers},
        ),
        returnValue: _i9.Future<_i8.Response>.value(_FakeResponse_6(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i9.Future<_i8.Response>);

  @override
  _i9.Future<_i8.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i15.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i9.Future<_i8.Response>.value(_FakeResponse_6(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i9.Future<_i8.Response>);

  @override
  _i9.Future<_i8.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i15.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i9.Future<_i8.Response>.value(_FakeResponse_6(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i9.Future<_i8.Response>);

  @override
  _i9.Future<_i8.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i15.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i9.Future<_i8.Response>.value(_FakeResponse_6(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i9.Future<_i8.Response>);

  @override
  _i9.Future<_i8.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i15.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i9.Future<_i8.Response>.value(_FakeResponse_6(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i9.Future<_i8.Response>);

  @override
  _i9.Future<String> read(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [url],
          {#headers: headers},
        ),
        returnValue: _i9.Future<String>.value(_i13.dummyValue<String>(
          this,
          Invocation.method(
            #read,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i9.Future<String>);

  @override
  _i9.Future<_i16.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readBytes,
          [url],
          {#headers: headers},
        ),
        returnValue: _i9.Future<_i16.Uint8List>.value(_i16.Uint8List(0)),
      ) as _i9.Future<_i16.Uint8List>);

  @override
  _i9.Future<_i8.StreamedResponse> send(_i8.BaseRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [request],
        ),
        returnValue:
            _i9.Future<_i8.StreamedResponse>.value(_FakeStreamedResponse_7(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
      ) as _i9.Future<_i8.StreamedResponse>);

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
